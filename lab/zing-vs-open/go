#!/usr/bin/env bash

#the Ip address of this box, which run the MQ msg broker,  all com's between this controling box and the remote jvm do through the jms MQ broker.
#the remote jvm's need to know the public Ip address of this box, as it will be running the MQ server.
hz broker -ip -THE-PUBLIC-IP-OF-THIS-BOX-

#enable jhic monitor on remote member/client jvm's
hz set jhic
hz set jhicArgs -d 30 -i 1000

gcArgs="$gcArgs -verbose:gc -Xloggc:verbosegc.log"
gcArgs="$gcArgs -XX:+PrintGCTimeStamps -XX:+PrintGCDetails -XX:+PrintTenuringDistribution -XX:+PrintGCApplicationStoppedTime -XX:+PrintGCApplicationConcurrentTime"

#init the cluster on the remote boxes, listed in the -boxes filename,  the format of the -boxes file should be.
#publicIp,privateIp
#1 line for each box.
#init the cluster, with the following args, on the boxes listed in the jdkZing.txt
hz memberOps "${gcArgs} -XX:+PrintFlagsFinal -XX:+UseLargePages -Xms20G -Xmx20G"
hz clientOps "${gcArgs} -XX:+PrintFlagsFinal -XX:+UseLargePages -Xms3G -Xmx3G"

#-size M4C4, a cluster size pre set,  4 member nodes 4 clients, split over the number of boxes you listed in the -boxes file
#-id a unique string you give to your cluster
#-v the version of HZ the cluster should run.  the hazelcast jars must be in your local ~/.m2 repo  directory
#-type the type of the cluster to run HZ is a hazelcast cluster
#-boxes a file containing a list of public,private address pairs, 1 per line for each box
#-user name should have password less ssh access to all ips, listed in -boxes file
hz cluster -size M4C4 -id zing -v 3.6.2 -type HZ -boxes jdkZing.txt -user ec2-user

#init the cluster, with the following args you can used different settings hear
hz memberOps "${gcArgs} -XX:+PrintFlagsFinal -XX:+UseLargePages -Xms20G -Xmx20G"
hz clientOps "${gcArgs} -XX:+PrintFlagsFinal -XX:+UseLargePages -Xms3G -Xmx3G"
hz cluster -size M4C4 -id open -v 3.6.2 -type HZ -boxes jdkOpen.txt -user ec2-user


#controls which tool is use to measure the benchmark  [Hdr | Metrics]
hz type Hdr

#controls the expected interval in milli sec,  at which the timeStep() method to be measured is called for each thread
#a value of 1 means we expect to call the bench mark once every milli sec,  a value of 0 is a flat out full tilt throughput style benchmark 
hz interval 1

#which jvm's should run the benchmark,  Client or Member
hz driver Client

#number of threads to run the bench mark in each driver
hz threads 8

#bench mark duration settings
hz warmup 30
hz bench 120

#run the bench marks on the 2 cluster in parallel, results are downloaded to this box into at ./output by default
#then the bench mark file to run "putBench"
nohup hz run -id zing putBench > outZing.txt &
nohup hz run -id open putBench > outOpen.txt &
wait

#removes all trace of hz and the benchmark from the remote boxes
hz wipe

#plots the results download locale into the output dir,  you will need gnuplot installed localy
hz chart compare -dir output -red zing -blue open

#process the jhic data locale and graph it.
hz processJhic -dir output
hz chart compairHdr -dir output -red Member-zing -blue Member-open
hz chart compairHdr -dir output -red Client-zing -blue Client-open

#copy setting to results dir for convenience
cp go output/
mv out*.txt output/
mv nohup.out output/

