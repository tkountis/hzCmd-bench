#!/usr/bin/env bash

set -e
cleanup() {
    exitCode=$?
    hz download
    hz chart metrics
    exit ${exitCode}
}
trap "cleanup" INT TERM EXIT

ec2Type="c4.2xlarge"
aws-create --count 5 --instanceType ${ec2Type} --outputFile a.box
aws-create --count 5 --instanceType ${ec2Type} --outputFile b.box
aws-create --count 5 --instanceType ${ec2Type} --outputFile c.box
aws-create --count 5 --instanceType ${ec2Type} --outputFile d.box
aws-create --count 5 --instanceType ${ec2Type} --outputFile e.box

ops="${ops} -Dhazelcast.enterprise.license.key=${HAZELCAST_EE_KEY} -Dhazelcast.backpressure.enabled=true"
ops="${ops} -Dhazelcast.enterprise.wanrep.batch.size=150"

mOps="${mOps} -Dhazelcast.hotrestart.gc.stuck.detect.threshold=10000 -Dhazelcast.hotrestart.free.native.memory.percentage=15"
mOps="${mOps} -Dhazelcast.connection.monitor.interval=1000 -Dhazelcast.connection.monitor.max.faults=30 -Dhazelcast.rest.enabled=true"

hz memberOps "-Xms4G -Xmx4G ${ops} ${mOps}"
hz clientOps "-Xms400M -Xmx400M ${ops}"

hzVersion="3.8-SNAPSHOT"
hz cluster -id A -size M5C10 -v ${hzVersion} -ee -boxes a.box
hz cluster -id B -size M5C10 -v ${hzVersion} -ee -boxes b.box
hz cluster -id C -size M5C10 -v ${hzVersion} -ee -boxes c.box
hz cluster -id D -size M5C10 -v ${hzVersion} -ee -boxes d.box
hz cluster -id E -size M5C10 -v ${hzVersion} -ee -boxes e.box

echo '  WAN  '
echo 'A-----B'
echo '| \  /|'
echo '|  C  |'
echo '| /  \|'
echo 'D-----E'
hz wan A B D C
hz wan B E A C
hz wan E D B C
hz wan D A E C
hz wan C A B D E
hz bounce Member

echo 'load C with data validate replication'
hz run -id C ops/load
sleep 30
hz run ops/validate

echo 'shutdown all cluster validate hot restart data'
hz run ops/clusterShutdown
hz embeddedRestart Member
hz run ops/validate

echo 'shutdown C and validate remove data from (A|B|D|E)'
hz run -id C ops/clusterShutdown
hz run -id A ops/remove_load
sleep 30
hz run -id '(A|B|D|E)' ops/validateSize0

echo 'restart C validate data loaded by C at hot restart, is cleared by queued remove events'
hz embeddedRestart -id C Member
sleep 60
hz run -id 'C' ops/validateSize0


echo 'load C with data validate replication'
hz run -id C ops/load
sleep 30
hz run ops/validate

echo 'Sync from C to (A|B|D|E) while Shutdown restart (A|E)'
for i in {0..10} ; do
 ./syncMapsToABDE_50 $(hz ip -id C Member1) &
 hz run -id '(A|E)' ops/clusterShutdown
 hz embeddedRestart -id '(A|E)' Member
 hz run ops/validate
 wait
done
hz check

echo 'Sync from C to (A|B|D|E) while shutting down Member of (A|E)'
for i in {0..10} ; do
 ./syncMapsToABDE_50 $(hz ip -id C Member1) &
 hz run  -id '(A|E)' ops/shutdown Member3
 hz bash -id '(A|E)' -jvmId Member3 'rm -r hot-junk'
 hz embeddedRestart -id '(A|E)' Member3
 hz run ops/validate
 wait
done
hz check

echo 'Sync from C to (A|B|D|E) while killing Member of (A|E)'
for i in {0..10} ; do
 ./syncMapsToABDE_50 $(hz ip -id C Member1) &
 hz kill -id '(A|E)' Member3
 hz bash -id '(A|E)' -jvmId Member3 'rm -r hot-junk'
 hz restart -id '(A|E)' Member3
 hz run ops/validate
 wait
done
hz check





echo 'Sync from C to (A|B|D|E) while shutting down Member of C'
for i in {0..10} ; do
 ./syncMapsToABDE_50 $(hz ip -id C Member1) &
 hz run  -id 'C' ops/shutdown Member3
 hz bash -id 'C' -jvmId Member3 'rm -r hot-junk'
 hz embeddedRestart -id 'C' Member3
 hz run ops/validate
 wait
done
hz check

echo 'Sync from C to (A|B|D|E) while killing Member of C'
for i in {0..10} ; do
 ./syncMapsToABDE_50 $(hz ip -id C Member1) &
 hz kill -id 'C' Member3
 hz bash -id 'C' -jvmId Member3 'rm -r hot-junk'
 hz restart -id 'C' Member3
 hz run ops/validate
 wait
done
hz check

